"use strict";

var _vitest = require("vitest");
var _AccountApi = require("./AccountApi.js");
var _axios = _interopRequireDefault(require("axios"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
_vitest.vi.mock('axios');
(0, _vitest.describe)('AccountApi', () => {
  (0, _vitest.beforeEach)(() => {
    _vitest.vi.clearAllMocks();
  });
  (0, _vitest.describe)('constructor', () => {
    (0, _vitest.it)('should initialize with API URL', () => {
      const apiUrl = 'http://api.example.com';
      const api = new _AccountApi.AccountApi(apiUrl);
      (0, _vitest.expect)(api.apiUrl).toBe(apiUrl);
    });
  });
  (0, _vitest.describe)('getAccountById', () => {
    (0, _vitest.it)('should throw an error if account ID is missing', async () => {
      const api = new _AccountApi.AccountApi('http://api.example.com');
      await (0, _vitest.expect)(() => api.getAccountById()).rejects.toThrow('Account ID is required');
    });
    (0, _vitest.it)('should fetch account data from API', async () => {
      const accountId = '123';
      const apiUrl = 'http://api.example.com';
      const api = new _AccountApi.AccountApi(apiUrl);
      const mockResponse = {
        status: 200,
        data: {
          _id: accountId,
          dbName: 'testDb',
          clusterId: 'cluster1'
        }
      };
      _axios.default.get.mockResolvedValueOnce(mockResponse);
      const result = await api.getAccountById(accountId);
      (0, _vitest.expect)(_axios.default.get).toHaveBeenCalledWith(`${apiUrl}/${accountId}`);
      (0, _vitest.expect)(result).toEqual(mockResponse.data);
    });
    (0, _vitest.it)('should throw an error if API request fails', async () => {
      const accountId = '123';
      const apiUrl = 'http://api.example.com';
      const api = new _AccountApi.AccountApi(apiUrl);
      const mockResponse = {
        status: 404,
        statusText: 'Not Found'
      };
      _axios.default.get.mockResolvedValueOnce(mockResponse);
      await (0, _vitest.expect)(() => api.getAccountById(accountId)).rejects.toThrow('Failed to fetch account: Not Found');
    });
    (0, _vitest.it)('should throw an error if API request returns no data', async () => {
      const accountId = '123';
      const apiUrl = 'http://api.example.com';
      const api = new _AccountApi.AccountApi(apiUrl);
      const mockResponse = {
        status: 200,
        data: null,
        statusText: 'OK'
      };
      _axios.default.get.mockResolvedValueOnce(mockResponse);
      await (0, _vitest.expect)(() => api.getAccountById(accountId)).rejects.toThrow('Failed to fetch account: OK');
    });
    (0, _vitest.it)('should handle network errors', async () => {
      const accountId = '123';
      const apiUrl = 'http://api.example.com';
      const api = new _AccountApi.AccountApi(apiUrl);
      const networkError = new Error('Network Error');
      _axios.default.get.mockRejectedValueOnce(networkError);
      await (0, _vitest.expect)(() => api.getAccountById(accountId)).rejects.toThrow(networkError);
    });
  });
});