"use strict";

var _vitest = require("vitest");
var _utils = require("./utils.js");
var _mongodb = require("mongodb");
(0, _vitest.describe)('utils', () => {
  (0, _vitest.describe)('getMongoDbObjectId', () => {
    (0, _vitest.it)('should return an ObjectId when given a valid hex string', () => {
      const hexId = '507f1f77bcf86cd799439011';
      const objectId = (0, _utils.getMongoDbObjectId)(hexId);
      (0, _vitest.expect)(objectId).toBeInstanceOf(_mongodb.ObjectId);
      (0, _vitest.expect)(objectId.toString()).toBe(hexId);
    });
    (0, _vitest.it)('should return an ObjectId when given an existing ObjectId instance', () => {
      const originalId = new _mongodb.ObjectId();
      const objectId = (0, _utils.getMongoDbObjectId)(originalId);
      (0, _vitest.expect)(objectId).toBeInstanceOf(_mongodb.ObjectId);
      (0, _vitest.expect)(objectId.toString()).toBe(originalId.toString());
    });
    (0, _vitest.it)('should throw an error when given null', () => {
      (0, _vitest.expect)(() => (0, _utils.getMongoDbObjectId)(null)).toThrow('null is not a valid Mongo ObjectId');
    });
    (0, _vitest.it)('should throw an error when given undefined', () => {
      (0, _vitest.expect)(() => (0, _utils.getMongoDbObjectId)(undefined)).toThrow('undefined is not a valid Mongo ObjectId');
    });
    (0, _vitest.it)('should throw an error when given an empty string', () => {
      (0, _vitest.expect)(() => (0, _utils.getMongoDbObjectId)('')).toThrow(' is not a valid Mongo ObjectId');
    });
    (0, _vitest.it)('should throw an error when given an invalid hex string (too short)', () => {
      (0, _vitest.expect)(() => (0, _utils.getMongoDbObjectId)('abc123')).toThrow('abc123 is not a valid Mongo ObjectId');
    });
    (0, _vitest.it)('should throw an error when given an invalid hex string (invalid chars)', () => {
      (0, _vitest.expect)(() => (0, _utils.getMongoDbObjectId)('XYZ1234567890123456789012')).toThrow('XYZ1234567890123456789012 is not a valid Mongo ObjectId');
    });
    (0, _vitest.it)('should throw an error when given a number', () => {
      (0, _vitest.expect)(() => (0, _utils.getMongoDbObjectId)(12345)).toThrow('12345 is not a valid Mongo ObjectId');
    });
    (0, _vitest.it)('should throw an error when given an object', () => {
      (0, _vitest.expect)(() => (0, _utils.getMongoDbObjectId)({
        id: '507f1f77bcf86cd799439011'
      })).toThrow('[object Object] is not a valid Mongo ObjectId');
    });
    (0, _vitest.it)('should throw an error when given an array', () => {
      (0, _vitest.expect)(() => (0, _utils.getMongoDbObjectId)(['507f1f77bcf86cd799439011'])).toThrow('507f1f77bcf86cd799439011 is not a valid Mongo ObjectId');
    });
  });
});