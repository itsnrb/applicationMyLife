import { describe, it, expect, vi, beforeEach } from 'vitest';
import { AccountApi } from './AccountApi.js';
import axios from 'axios';
vi.mock('axios');
describe('AccountApi', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });
  describe('constructor', () => {
    it('should initialize with API URL', () => {
      const apiUrl = 'http://api.example.com';
      const api = new AccountApi(apiUrl);
      expect(api.apiUrl).toBe(apiUrl);
    });
  });
  describe('getAccountById', () => {
    it('should throw an error if account ID is missing', async () => {
      const api = new AccountApi('http://api.example.com');
      await expect(() => api.getAccountById()).rejects.toThrow('Account ID is required');
    });
    it('should fetch account data from API', async () => {
      const accountId = '123';
      const apiUrl = 'http://api.example.com';
      const api = new AccountApi(apiUrl);
      const mockResponse = {
        status: 200,
        data: {
          _id: accountId,
          dbName: 'testDb',
          clusterId: 'cluster1'
        }
      };
      axios.get.mockResolvedValueOnce(mockResponse);
      const result = await api.getAccountById(accountId);
      expect(axios.get).toHaveBeenCalledWith(`${apiUrl}/${accountId}`);
      expect(result).toEqual(mockResponse.data);
    });
    it('should throw an error if API request fails', async () => {
      const accountId = '123';
      const apiUrl = 'http://api.example.com';
      const api = new AccountApi(apiUrl);
      const mockResponse = {
        status: 404,
        statusText: 'Not Found'
      };
      axios.get.mockResolvedValueOnce(mockResponse);
      await expect(() => api.getAccountById(accountId)).rejects.toThrow('Failed to fetch account: Not Found');
    });
    it('should throw an error if API request returns no data', async () => {
      const accountId = '123';
      const apiUrl = 'http://api.example.com';
      const api = new AccountApi(apiUrl);
      const mockResponse = {
        status: 200,
        data: null,
        statusText: 'OK'
      };
      axios.get.mockResolvedValueOnce(mockResponse);
      await expect(() => api.getAccountById(accountId)).rejects.toThrow('Failed to fetch account: OK');
    });
    it('should handle network errors', async () => {
      const accountId = '123';
      const apiUrl = 'http://api.example.com';
      const api = new AccountApi(apiUrl);
      const networkError = new Error('Network Error');
      axios.get.mockRejectedValueOnce(networkError);
      await expect(() => api.getAccountById(accountId)).rejects.toThrow(networkError);
    });
  });
});