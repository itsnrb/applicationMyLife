import { describe, it, expect } from 'vitest';
import { getMongoDbObjectId } from './utils.js';
import { ObjectId } from 'mongodb';
describe('utils', () => {
  describe('getMongoDbObjectId', () => {
    it('should return an ObjectId when given a valid hex string', () => {
      const hexId = '507f1f77bcf86cd799439011';
      const objectId = getMongoDbObjectId(hexId);
      expect(objectId).toBeInstanceOf(ObjectId);
      expect(objectId.toString()).toBe(hexId);
    });
    it('should return an ObjectId when given an existing ObjectId instance', () => {
      const originalId = new ObjectId();
      const objectId = getMongoDbObjectId(originalId);
      expect(objectId).toBeInstanceOf(ObjectId);
      expect(objectId.toString()).toBe(originalId.toString());
    });
    it('should throw an error when given null', () => {
      expect(() => getMongoDbObjectId(null)).toThrow('null is not a valid Mongo ObjectId');
    });
    it('should throw an error when given undefined', () => {
      expect(() => getMongoDbObjectId(undefined)).toThrow('undefined is not a valid Mongo ObjectId');
    });
    it('should throw an error when given an empty string', () => {
      expect(() => getMongoDbObjectId('')).toThrow(' is not a valid Mongo ObjectId');
    });
    it('should throw an error when given an invalid hex string (too short)', () => {
      expect(() => getMongoDbObjectId('abc123')).toThrow('abc123 is not a valid Mongo ObjectId');
    });
    it('should throw an error when given an invalid hex string (invalid chars)', () => {
      expect(() => getMongoDbObjectId('XYZ1234567890123456789012')).toThrow('XYZ1234567890123456789012 is not a valid Mongo ObjectId');
    });
    it('should throw an error when given a number', () => {
      expect(() => getMongoDbObjectId(12345)).toThrow('12345 is not a valid Mongo ObjectId');
    });
    it('should throw an error when given an object', () => {
      expect(() => getMongoDbObjectId({
        id: '507f1f77bcf86cd799439011'
      })).toThrow('[object Object] is not a valid Mongo ObjectId');
    });
    it('should throw an error when given an array', () => {
      expect(() => getMongoDbObjectId(['507f1f77bcf86cd799439011'])).toThrow('507f1f77bcf86cd799439011 is not a valid Mongo ObjectId');
    });
  });
});